# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-08-23 15:05
from __future__ import unicode_literals

#from django.contrib.auth.models import User, Permission
from django.core.exceptions import MultipleObjectsReturned, ValidationError
from django.db import migrations


def create_reporter(apps, schema_editor):
    # only reporter should have the permission to add incidents, therefore
    # we search for this user
    # in new installations there are no permissions during initial migration
    # therefore try is necessary
    # only one reporter should exist before this migration.
    Permission = apps.get_model('auth', 'Permission')
    User = apps.get_model('auth', 'User')
    CriticalIncident = apps.get_model('cirs', 'CriticalIncident')
    try:
        
        permission = Permission.objects.get(codename='add_criticalincident')
        try:
            reporter = User.objects.get(user_permissions=permission)
            Reporter = apps.get_model('cirs', 'Reporter')
            print 'Assigning {} as reporter'.format(reporter.username)
            rep = Reporter.objects.create(user=reporter)
        except User.DoesNotExist:
            if CriticalIncident.objects.count() > 0:
                raise ValidationError('There are critical incidents in the database, '
                                      'therefore there should be one user with permission '
                                      '"add_criticalincident". '
                                      'Correct and rerun the migration!')
            print 'There is no user with reporter permissions!'
            # TODO: Report error if critical incidents exist without reporter user.
        except MultipleObjectsReturned as e:
            raise e
    except Permission.DoesNotExist:
        print 'Permission does not exist'
        if User.objects.count() == 0:
            print 'This is no problem as this is apparently the initial migration'

def create_reviewers(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Permission = apps.get_model('auth', 'Permission')
    Reviewer = apps.get_model('cirs', 'Reviewer')
    Reporter = apps.get_model('cirs', 'Reporter')
    CriticalIncident = apps.get_model('cirs', 'CriticalIncident')
    try:
        permission = Permission.objects.get(codename='change_criticalincident')
        reviewers = User.objects.filter(user_permissions=permission)
        if reviewers.count() == 0:
            if CriticalIncident.objects.count() > 0:
                raise ValidationError('There are critical incidents in the database, '
                                      'therefore there should be at least one user with permission '
                                      '"change_criticalincident". '
                                      'Correct and rerun the migration!')
        for reviewer in reviewers:
            try:
                #print 'Rev perms: {}'.format(reviewer.user_permissions.all())
                try:
                    # model.full_clean() does not work in migrations!!!
                    if reviewer.reporter.user == reviewer:
                        raise ValidationError('{} cannot be reporter and reviewer. Please correct permissions and migrate again'.format(reviewer.username))
                except Reporter.DoesNotExist:
                    pass
                role = Reviewer(user = reviewer)
                role.full_clean()
                print 'Assigning {} as reviewer'.format(reviewer.username)
                role.save()
            except ValidationError as e:
                raise e
            #Reviewer.objects.create(user = reviewer)
    except Permission.DoesNotExist:
        print 'Permission does not exist'
        if User.objects.count() == 0:
            print 'This is no problem as this is apparently the initial migration'


def backwards(apps, schema_editor):
    for cls_name in ('Reporter', 'Reviewer'):
        model_cls = apps.get_model('cirs', cls_name)
        model_cls.objects.all().delete()


def forward(apps, schema_editor):
    create_reporter(apps, schema_editor)
    create_reviewers(apps, schema_editor)
    

class Migration(migrations.Migration):

    dependencies = [
        ('cirs', '0005_organization_and_roles'),
    ]

    operations = [
        migrations.RunPython(forward, reverse_code=backwards)
    ]
